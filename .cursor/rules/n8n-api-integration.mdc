---
description: n8n API integration guidelines, authentication, and workflow management
---

# n8n API Integration Guide

## Environment Configuration

### API Key Storage

- Store API key in `.env.local` as: `N8N_API_KEY=your_jwt_token_here`
- **CRITICAL**: Use `X-N8N-API-KEY` header format (not `Authorization: Bearer`)
- API keys are JWT tokens with expiration dates

### Instance Configuration

```bash
# Example .env.local
N8N_API_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
N8N_BASE_URL=https://n8n.automatic.so
```

## Authentication Pattern

```bash
curl -X GET "${N8N_BASE_URL}/api/v1/workflows" \
  -H "X-N8N-API-KEY: ${N8N_API_KEY}" \
  -H "Content-Type: application/json"
```

## Complete API Endpoints Reference

_Source: https://n8n.automatic.so/api/v1/docs/ - n8n Public API 1.1.1 OAS 3.0_

### User Operations

- `GET /users` - Retrieve all users
- `POST /users` - Create multiple users
- `GET /users/{id}` - Get user by ID/Email
- `DELETE /users/{id}` - Delete a user
- `PATCH /users/{id}/role` - Change a user's global role

### Audit Operations

- `POST /audit` - Generate an audit

### Execution Operations

- `GET /executions` - Retrieve all executions
- `GET /executions/{id}` - Retrieve an execution
- `DELETE /executions/{id}` - Delete an execution

### Workflow Operations

- `POST /workflows` - Create a workflow
- `GET /workflows` - Retrieve all workflows
- `GET /workflows/{id}` - Retrieve a workflow
- `DELETE /workflows/{id}` - Delete a workflow
- `PUT /workflows/{id}` - Update a workflow
- `POST /workflows/{id}/activate` - Activate a workflow
- `POST /workflows/{id}/deactivate` - Deactivate a workflow
- `PUT /workflows/{id}/transfer` - Transfer a workflow to another project
- `GET /workflows/{id}/tags` - Get workflow tags
- `PUT /workflows/{id}/tags` - Update tags of a workflow

### Credential Operations

- `POST /credentials` - Create a credential
- `DELETE /credentials/{id}` - Delete credential by ID
- `GET /credentials/schema/{credentialTypeName}` - Show credential data schema
- `PUT /credentials/{id}/transfer` - Transfer a credential to another project

### Tags Operations

- `POST /tags` - Create a tag
- `GET /tags` - Retrieve all tags
- `GET /tags/{id}` - Retrieve a tag
- `DELETE /tags/{id}` - Delete a tag
- `PUT /tags/{id}` - Update a tag

### Source Control Operations

- `POST /source-control/pull` - Pull changes from the remote repository

### Variables Operations

- `POST /variables` - Create a variable
- `GET /variables` - Retrieve variables
- `DELETE /variables/{id}` - Delete a variable
- `PUT /variables/{id}` - Update a variable

### Projects Operations

- `POST /projects` - Create a project
- `GET /projects` - Retrieve projects
- `DELETE /projects/{projectId}` - Delete a project
- `PUT /projects/{projectId}` - Update a project
- `POST /projects/{projectId}/users` - Add one or more users to a project
- `DELETE /projects/{projectId}/users/{userId}` - Delete a user from a project
- `PATCH /projects/{projectId}/users/{userId}` - Change a user's role in a project

## Core API Endpoints (Legacy Reference)

### Workflow Management

- `GET /api/v1/workflows` - List all workflows
- `POST /api/v1/workflows` - Create workflow
- `PUT /api/v1/workflows/{id}` - Update workflow
- `DELETE /api/v1/workflows/{id}` - Delete workflow
- `POST /api/v1/workflows/{id}/activate` - Activate workflow
- `POST /api/v1/workflows/{id}/deactivate` - Deactivate workflow

### Execution Management

- `GET /api/v1/executions` - List executions
- `GET /api/v1/executions?workflowId={id}` - Get workflow executions
- `POST /api/v1/workflows/{id}/execute` - Manual execution

## Workflow Structure

### Required Workflow Schema

```json
{
  "name": "Workflow Name",
  "nodes": [
    {
      "parameters": {},
      "id": "unique-node-id",
      "name": "Display Name",
      "type": "n8n-nodes-base.nodetype",
      "typeVersion": 2,
      "position": [x, y]
    }
  ],
  "connections": {
    "Node Name": {
      "main": [[{
        "node": "Target Node",
        "type": "main",
        "index": 0
      }]]
    }
  },
  "settings": {}
}
```

### Common Node Types

- `n8n-nodes-base.webhook` - Webhook triggers
- `n8n-nodes-base.httpRequest` - HTTP requests
- `n8n-nodes-base.code` - JavaScript code execution
- `@n8n/n8n-nodes-langchain.agent` - AI agents
- `n8n-nodes-base.supabaseTool` - Supabase integration

## Key Implementation Notes

### Read-Only Fields

- **Never include** `active` field in CREATE requests (read-only)
- **Never include** `id`, `createdAt`, `updatedAt` in node creation
- Workflow `versionId` is auto-generated on updates

### Webhook URL Pattern

- Production webhooks: `{baseUrl}/webhook/{path}`
- Test webhooks: Different URL pattern (check n8n UI)
- Webhooks only work when workflow is `active: true`

### Node Positioning

- Use `position: [x, y]` array format
- Typical spacing: 220px horizontal, 200px vertical
- Start positions around [240, 300]

## Error Handling

### Common Issues

1. **401 Unauthorized**: Check API key and header format
2. **404 Not Found**: Verify endpoint URLs and workflow IDs
3. **Read-only field errors**: Remove `active`, `id` fields from requests
4. **Webhook 404**: Ensure workflow is activated first

## Documentation Links

- **Official API Docs**: [https://docs.n8n.io/api/](https://docs.n8n.io/api/)
- **API Playground**: Available in self-hosted n8n instances
- **Node Reference**: [https://docs.n8n.io/integrations/](https://docs.n8n.io/integrations/)
- **Webhook Documentation**: [https://docs.n8n.io/workflows/components/trigger-nodes/](https://docs.n8n.io/workflows/components/trigger-nodes/)

## Best Practices

1. **Always test API connection** first with `GET /workflows`
2. **Create workflows inactive** then activate separately
3. **Use meaningful node IDs** and names for maintainability
4. **Position nodes clearly** with consistent spacing
5. **Include error handling** in workflow logic
6. **Version control** workflow JSON for complex builds
7. **Test workflows manually** before automation

## Example Integration Pattern

```javascript
const n8nClient = {
  baseUrl: process.env.N8N_BASE_URL,
  headers: {
    "X-N8N-API-KEY": process.env.N8N_API_KEY,
    "Content-Type": "application/json",
  },

  async createWorkflow(workflowData) {
    const response = await fetch(`${this.baseUrl}/api/v1/workflows`, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(workflowData),
    });
    return response.json();
  },
};
```

## LangChain Agent Integration (CRITICAL)

### Node Type Requirements

**For LangChain Agent Integration:**

- ✅ Use `n8n-nodes-base.supabaseTool` for AI agents
- ❌ Don't use `n8n-nodes-base.supabase` for AI agents (causes `supplyData` errors)

```json
// ❌ Wrong - causes "Node does not have a supplyData method defined"
"type": "n8n-nodes-base.supabase"

// ✅ Correct - works with LangChain agents
"type": "n8n-nodes-base.supabaseTool"
```

### Chat Trigger Configuration

**Chat Trigger Mode Evolution:**

```json
// Basic public chat (no webhook API)
"parameters": {
  "public": true
}

// Hosted chat mode (no webhook API)
"parameters": {
  "mode": "hostedChat",
  "public": true
}

// Embedded mode (limited webhook)
"parameters": {
  "mode": "embedded",
  "public": true
}

// Webhook mode (full API access) ✅ REQUIRED
"parameters": {
  "mode": "webhook",
  "public": true,
  "options": {
    "allowedOrigins": "*",
    "responseMode": "streaming"
  }
}
```

**Webhook URL Format:**

- Webhook mode creates: `{baseUrl}/webhook/{uuid}/chat`
- Example: `https://n8n.automatic.so/webhook/ec674109-b4f7-405b-91df-1d1ed574e87d/chat`

## Database Field Type Validation (CRITICAL)

### UUID vs Text Field Mapping

**Common Error:** `invalid input syntax for type uuid: "H0001"`

**Root Cause:** Using text values in UUID fields or wrong field names

**Critical Field Type Requirements:**

```javascript
// UUID Fields (require actual UUIDs)
policyholder_id: "123e4567-e89b-12d3-a456-426614174000" ✅
agency_id: "123e4567-e89b-12d3-a456-426614174000" ✅
carrier_id: "123e4567-e89b-12d3-a456-426614174000" ✅

// Text Fields (use string values)
policy_number: "H0001" ✅
carrier_code: "LLI" ✅
email: "user@example.com" ✅
```

**Fix Carrier Lookups:**

```json
// ❌ Wrong - uses UUID field with text value
{
  "keyName": "id",
  "keyValue": "LLI"  // Text in UUID field = ERROR
}

// ✅ Correct - uses text field with text value
{
  "keyName": "carrier_code",
  "keyValue": "LLI"  // Text in text field = SUCCESS
}
```

## Advanced Error Handling

### Common LangChain Agent Errors

**1. supplyData Method Error**

```
Error: Node does not have a `supplyData` method defined
Solution: Change node type from `supabase` to `supabaseTool`
```

**2. UUID Type Mismatch**

```
Error: invalid input syntax for type uuid: "H0001"
Solution: Use correct field names (carrier_code vs id)
```

**3. Node Connection Errors**

```
Error: Could not find a node named "NodeName"
Solution: Verify connection targets match exact node names
```

**4. Webhook Not Registered**

```
Error: The requested webhook "POST workflowId" is not registered
Solution: Set chat trigger mode to "webhook"
```

### Debugging Workflow

**Systematic Debugging Steps:**

1. Test API connection: `GET /workflows`
2. Check workflow status: `GET /workflows/{id}`
3. Validate node types for LangChain compatibility
4. Check database field type alignment
5. Verify node connection names match exactly
6. Test webhook endpoints after mode changes
7. Check recent executions: `GET /executions?workflowId={id}`

## Tool Description Best Practices

### AI Agent Tool Configuration

**Critical for AI Success:**

```json
{
  "descriptionType": "manual",
  "toolDescription": "Clear description with field type requirements. UUID fields need UUIDs from previous tool results. Text fields accept string values. Example: Use policyholder UUID from Search Policyholder by Email tool result.",
  "operation": "get",
  "tableId": "table_name",
  "filters": {
    "conditions": [
      {
        "keyName": "field_name",
        "keyValue": "={{ $fromAI('param_name', 'Clear description of expected value and type', 'string') }}"
      }
    ]
  }
}
```

**Field Type Hints in Descriptions:**

- Always specify if field expects UUID vs text
- Reference which tools provide required UUIDs
- Include example values for clarity
- Mention data flow between tools

## Production Deployment Checklist

### Pre-Deployment Validation

**Required Checks:**

- [ ] All Supabase nodes use `supabaseTool` type
- [ ] Chat trigger set to `"mode": "webhook"`
- [ ] Database field types match tool configurations
- [ ] Node connections reference correct node names
- [ ] No read-only fields in workflow JSON
- [ ] Webhook endpoint tested with real data
- [ ] Tool descriptions include field type requirements

### Testing Strategy

**Comprehensive Testing:**

1. **API Connection Test**: Verify authentication works
2. **Node Type Validation**: Confirm LangChain compatibility
3. **Field Type Testing**: Test with actual database values
4. **Connection Validation**: Verify all node references
5. **Webhook Testing**: Test complete user flows
6. **Error Scenario Testing**: Test invalid inputs
7. **Performance Testing**: Test with realistic data loads

## Verified Working Example

The API successfully supports complete CRUD operations including:

- ✅ Creating multi-node workflows with connections
- ✅ Updating workflow structure and adding nodes
- ✅ Activating/deactivating workflows programmatically
- ✅ Managing workflow executions and monitoring
- ✅ LangChain agent integration with Supabase tools
- ✅ Database field type validation and mapping
- ✅ Chat trigger webhook API configuration
- ✅ Real-time streaming chat responses
