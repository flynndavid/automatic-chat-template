{
  "createdAt": "2025-08-18T22:23:22.727Z",
  "updatedAt": "2025-08-19T00:53:14.366Z",
  "id": "uJ2pbqxhY8BFpKOr",
  "name": "HomeFax 2.0 - Enhanced with Routing",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi there! I'm your HomeFax AI Assistant, and I can help you understand your homeowners insurance policy in plain language. I can explain what's covered (and what's not), help with claims guidance, track home maintenance, and connect you with the right staff member when needed. To get started, I'll need the email address associated with your insurance policy so I can look up your specific coverage details. What questions do you have about your homeowners insurance?\n\nHere are some demo policyholders you can use for testing:\nmorgan.ortiz1@example.com - Morgan Ortiz (2 policies: TN Liberty Lakes + CA Centurion Mutual)\njordan.evans4@example.com - Jordan Evans (2 policies: TN Centurion + CA Liberty Lakes)  \ndrew.smith21@example.com - Drew Smith (1 policy: CA Liberty Lakes)\ntaylor.vasquez19@example.com - Taylor Vasquez (1 policy: TX Liberty Lakes)\nelliot.nguyen7@example.com - Elliot Nguyen (1 policy: TN Liberty Lakes)",
        "options": {
          "allowFileUploads": false,
          "inputPlaceholder": "Ask about your coverage, claims, or policy details...",
          "subtitle": "Get instant answers about your homeowners insurance coverage + routing to the right staff",
          "title": "HomeFax AI Assistant 2.0 (Enhanced) \ud83c\udfe0",
          "responseMode": "lastNode"
        }
      },
      "id": "chat-trigger-enhanced",
      "name": "Enhanced Chat",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "position": [
        1232,
        432
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "options": {
          "temperature": 0
        }
      },
      "id": "gemini-enhanced",
      "name": "Connect Gemini",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1344,
        624
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "yJp0W04dueYXZHSN",
          "name": "Google Gemini (n8n-api-creds)"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $(\"Enhanced Chat\").item.json.sessionId }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1520,
        624
      ],
      "id": "memory-enhanced",
      "name": "Enhanced Memory"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Search for a policyholder in the database using their email address",
        "operation": "get",
        "tableId": "policyholders",
        "filters": {
          "conditions": [
            {
              "keyName": "email",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The email address to search for`, \"string\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1728,
        500
      ],
      "id": "search-policyholder-enhanced",
      "name": "Search Policyholder by Email",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get all insurance policies for a specific policyholder using their policyholder_id. The ID of the policy holder can be found by using the Get Policyholder tool using their email address.",
        "operation": "getAll",
        "tableId": "policies",
        "filters": {
          "conditions": [
            {
              "keyName": "policyholder_id",
              "condition": "eq",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Field_Value\", `The policyholder ID. The ID of the policy holder can be found by using the Get Policyholder tool using their email address.`, \"string\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1904,
        500
      ],
      "id": "get-policies-enhanced",
      "name": "Get Policies by Holder",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get detailed information about a specific insurance policy",
        "operation": "get",
        "tableId": "policies",
        "filters": {
          "conditions": [
            {
              "keyName": "policy_number",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The policy number (e.g., PTX001)`, \"string\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1728,
        600
      ],
      "id": "get-policy-details-enhanced",
      "name": "Get Policy Details",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get complete policyholder profile",
        "operation": "get",
        "tableId": "policyholders",
        "filters": {
          "conditions": [
            {
              "keyName": "email",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The email address of the policyholder (eg \"john.test@example.com\")`, \"string\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1904,
        600
      ],
      "id": "get-profile-enhanced",
      "name": "Get Policyholder Profile",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get insurance carrier information including portal URLs, contact details, and supported states. Use this when customers need self-service options or carrier-specific information.",
        "operation": "get",
        "tableId": "insurance_carriers",
        "filters": {
          "conditions": [
            {
              "keyName": "carrier_code",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The carrier code (e.g., LLI, SHC, CM) or use carrier name for lookup`, \"string\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2080,
        500
      ],
      "id": "get-carrier-info",
      "name": "Get Carrier Information",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Find the appropriate insurance contact based on request type, specialization, and licensing requirements. Specify the contact type needed (agent for sales, lsr for claims/endorsements, sr for documents) and any specific specialization (claims, billing, new_business, etc). The tool will find contacts licensed in the appropriate state.",
        "operation": "getAll",
        "tableId": "insurance_contacts",
        "filters": {
          "conditions": [
            {
              "keyName": "agency_id",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The agency ID from the policy lookup`, \"string\") }}"
            },
            {
              "keyName": "contact_type",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions1_Value\", `Contact type: agent, lsr, sr, adjuster, or manager`, \"string\") }}"
            },
            {
              "keyName": "is_active",
              "keyValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2080,
        600
      ],
      "id": "find-available-contact",
      "name": "Find Available Contact",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Get the agency's routing preferences including default routing rules, business hours, SLA requirements, and calendar integration settings. Use this to understand how the agency prefers to handle different types of requests.",
        "operation": "get",
        "tableId": "agencies",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The agency ID from the policy lookup`, \"string\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2256,
        500
      ],
      "id": "get-agency-routing-rules",
      "name": "Get Agency Routing Rules",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Find contacts with specific specializations like 'claims', 'billing', 'endorsements', 'new_business', 'coi', 'documents', etc. Returns contacts ordered by routing priority. Use this for specialized routing based on request type.",
        "operation": "getAll",
        "tableId": "insurance_contacts",
        "filters": {
          "conditions": [
            {
              "keyName": "agency_id",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The agency ID from the policy lookup`, \"string\") }}"
            },
            {
              "keyName": "is_active",
              "keyValue": "true"
            }
          ]
        },
        "additionalFields": {
          "orderBy": [
            {
              "column": "routing_priority",
              "direction": "asc"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2256,
        600
      ],
      "id": "get-specialized-contact",
      "name": "Get Specialized Contact",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Retrieve carrier-specific portal URLs for self-service options. Use this to provide customers with direct links to billing portals, claims filing, COI requests, or ID card downloads based on their specific carrier.",
        "operation": "get",
        "tableId": "insurance_carriers",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "keyValue": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI(\"conditions0_Value\", `The carrier ID from the policy lookup`, \"string\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2080,
        700
      ],
      "id": "get-carrier-portals",
      "name": "Get Carrier Portals",
      "credentials": {
        "supabaseApi": {
          "id": "ReFMcY8N5op0JJEg",
          "name": "Supabase: HomeFax"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $(\"Enhanced Chat\").item.json.chatInput }}",
        "options": {
          "systemMessage": "=# HomeFax AI Agent System Prompt - Enhanced with Smart Routing\n\n<role>\nYou are the HomeFax AI Agent, a helpful assistant that explains homeowners insurance policies in plain language while ensuring intelligent routing to licensed staff. You help homeowners understand their coverage, track home maintenance, make informed insurance decisions, and connect them with the right staff member for follow-up actions. You are professional, trustworthy, supportive, and focused on providing clear, actionable information while adhering to all regulatory requirements.\n</role>\n\n<instructions>\n<goal>\nHelp homeowners understand their specific insurance policies and coverage by accessing their policy data through email lookup, then intelligently route requests to appropriate staff members using carrier portals and agency contacts to ensure compliance and customer service excellence.\n</goal>\n\n<context>\n### About HomeFax\nHomeFax is the \"Carfax for homes\" - an AI platform that reads insurance policies, tracks home history, and connects homeowners with their agents and staff. Our enhanced system provides 24/7 instant policy information while ensuring proper routing to licensed professionals and self-service options.\n\n### Enhanced Tool Suite\nYou have access to these tools to help users:\n\n**Policy Lookup Tools:**\n1. **search_policyholder_by_email**: Find a policyholder using their email address\n2. **get_policies_by_holder**: Get all policies for a specific policyholder using their holder_id\n3. **get_policy_details**: Get detailed information about a specific policy using policy_number\n4. **get_policyholder_profile**: Get complete policyholder profile including all their policies\n\n**NEW: Smart Routing Tools:**\n5. **get_carrier_information**: Get carrier portal URLs, contact info, and supported states\n6. **find_available_contact**: Find appropriate contact based on type, specialization, and licensing\n7. **get_agency_routing_rules**: Get agency-specific routing preferences and business rules\n8. **get_specialized_contact**: Find contacts with specific specializations ordered by priority\n9. **get_carrier_portals**: Get carrier-specific portal URLs for self-service options\n\n### Enhanced Tool Usage Workflow\n**REQUIRED Standard Flow:**\n1. User asks a question \u2192 Request email if not provided\n2. Use `search_policyholder_by_email` \u2192 Extract the holder_id from the response\n3. Use `get_policies_by_holder` with the holder_id \u2192 Get all their policies\n4. Use `get_policy_details` for specific policy questions (if needed)\n5. **Provide policy-specific information with professional disclaimer**\n6. **NEW: Determine request type and provide intelligent routing**\n\n**Enhanced Routing Flow:**\n1. **Get carrier info** using `get_carrier_portals` for self-service options\n2. **Get agency routing rules** using `get_agency_routing_rules` for preferences\n3. **Find specialized contacts** using `get_specialized_contact` or `find_available_contact`\n4. **Provide comprehensive response** with policy info + self-service + human routing\n\n### Request Type Routing Examples\n**Claims**: Use `get_specialized_contact` with specialization \"claims\" + `get_carrier_portals` for claims portal\n**Policy Changes**: Use `find_available_contact` with contact_type \"lsr\" for endorsements\n**New Sales**: Use `find_available_contact` with contact_type \"agent\" for sales leads\n**Documents**: Use `get_specialized_contact` with specialization \"documents\" + carrier portals\n\n\u26a0\ufe0f **IMPORTANT**: This information is for guidance only and must be confirmed by your licensed insurance agent. Policy interpretations can vary, and only your agent can provide definitive coverage determinations and handle claims or policy changes.\n</context>\n</instructions>\n"
        }
      },
      "id": "enhanced-ai-agent",
      "name": "CLAUDE AGENT",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1520,
        432
      ],
      "typeVersion": 2.2
    }
  ],
  "connections": {
    "Enhanced Chat": {
      "main": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Connect Gemini": {
      "ai_languageModel": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Memory": {
      "ai_memory": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Search Policyholder by Email": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Policies by Holder": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Policy Details": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Policyholder Profile": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Carrier Information": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Find Available Contact": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Agency Routing Rules": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Specialized Contact": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Carrier Portals": {
      "ai_tool": [
        [
          {
            "node": "CLAUDE AGENT",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {},
  "staticData": null,
  "meta": null,
  "pinData": null,
  "versionId": "cd327c7f-9fc3-45e2-bb2a-677656024b50",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-08-18T22:23:22.729Z",
      "updatedAt": "2025-08-18T22:23:22.729Z",
      "role": "workflow:owner",
      "workflowId": "uJ2pbqxhY8BFpKOr",
      "projectId": "SsJ77XqTFvkqxOlH",
      "project": {
        "createdAt": "2025-07-24T20:20:03.364Z",
        "updatedAt": "2025-07-24T20:21:18.272Z",
        "id": "SsJ77XqTFvkqxOlH",
        "name": "David Flynn <david@automatic.so>",
        "type": "personal",
        "icon": null,
        "description": null,
        "projectRelations": [
          {
            "createdAt": "2025-07-24T20:20:03.365Z",
            "updatedAt": "2025-07-24T20:20:03.365Z",
            "role": "project:personalOwner",
            "userId": "85610757-d66c-4952-9c3c-9198f0f11bf5",
            "projectId": "SsJ77XqTFvkqxOlH",
            "user": {
              "createdAt": "2025-07-24T20:20:02.635Z",
              "updatedAt": "2025-08-18T05:52:06.000Z",
              "id": "85610757-d66c-4952-9c3c-9198f0f11bf5",
              "email": "david@automatic.so",
              "firstName": "David",
              "lastName": "Flynn",
              "personalizationAnswers": {
                "version": "v4",
                "personalization_survey_submitted_at": "2025-07-24T20:22:00.961Z",
                "personalization_survey_n8n_version": "1.103.2",
                "automationGoalDevops": [
                  "data-syncing",
                  "reporting"
                ],
                "companySize": "<20",
                "companyType": "systems-integrator",
                "role": "engineering",
                "reportedSource": "twitter"
              },
              "settings": {
                "userActivated": true,
                "easyAIWorkflowOnboarded": true,
                "firstSuccessfulWorkflowId": "A3cvo7bacrDmsByU",
                "userActivatedAt": 1753388930804,
                "npsSurvey": {
                  "waitingForResponse": true,
                  "ignoredCount": 1,
                  "lastShownAt": 1755485453489
                }
              },
              "role": "global:owner",
              "disabled": false,
              "mfaEnabled": false,
              "lastActiveAt": "2025-08-18",
              "isPending": false
            }
          }
        ]
      }
    }
  ],
  "tags": []
}